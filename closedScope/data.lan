--0
main(){
   nlines = 5;
   i = nlines;
   iterate(nlines){
     iterate(i){ print '*';}
     i = i - 1;
     print '\n';
   }
}

--1
main(){
    n = 13;
    q = 5;
    divMod(n,q)< quo,res >;
    
    print 'Q';
    print ':';
    print quo;
    print '\n';
    
    print 'R';
    print ':';
    print res;
    print '\n';
}

divMod(n :: Int, q :: Int ) : Int, Int{
    return n / q, n % q;
}

--1.1

main(){
    n = 13;
    q = 5;
    w = divMod(n,q)[1];
    z = 2*w +1;
    
    
    print 'Z';
    print ':';
    print z;
    print '\n';
}

divMod(n :: Int, q :: Int ) : Int, Int{
    return n / q, n % q;
}

--2
main(){
   x = 0;
   print '>';
   read x;
   print x;
   print '\n';
   
}

--3

main(){
   k = 4;
   x = new Int [k];
   x[0] = 0;
   x[3] = 15;
   print x[3];
   print '\n';
   i  = 0;
   iterate(k){
      if(i % 2 == 0){
         x[i] = 2*i;
      }else{
         x[i] = 2*i+1;
      }
      i = i + 1;
   }
   i = 0;
   
   print '{';
   
   if(0 < k){
      print x[0];
      iterate(k-1){
          print ',';
          print x[i+1];
          i = i+ 1;
      }
   }
   
   print '}';
   print '\n';
}

--4
data Ponto{
   x :: Float;
   y :: Float;
}

main(){
   p = new Ponto ;
   p.x = 10.0;
   p.y = 10.0;
   print '(';
   print p.x;
   print ',';
   print ' ';
   print p.y;
   print ')';
   print '\n';
}

--5
data Ponto{
   x :: Int;
   y :: Int;
}

main(){
   k = 5;
   p = new Ponto [k];
   i = 0;
   iterate(k){
      p[i] = new Ponto;
      p[i].x = 12+i;
      p[i].y = 12-i;
      i = i + 1;
   }
   print '\n';
}

--6
data Ponto{
   x :: Int;
   y :: Int;
}

printP(p :: Ponto){
    print '(';
    print p.x;
    print ',';
    print p.y;
    print ')';
}

printV( v :: Ponto[], n :: Int){
   print '{';
   if(0 < n){
       printP( v[0]); 
       i = 1;
       iterate(n-1){
           print ',';
           printP(v[i]);
           i = i + 1;
       }
   }
   print '}';
}

-- Oredena em relaÃ§Ã£o a coordenada x
sort(v :: Ponto[], n :: Int){
    i = 0;
    iterate(n-1){
       j = i + 1;
       iterate(n-(i+1)){
          if(v[i].x < v[j].x){
             aux = v[i];
             v[i] = v[j];
             v[j] = aux;
          }
          j = j + 1;
       }
       i = i +1; 
    }
}

main(){
   k = 5;
   p = new Ponto [k];
   i = 0;
   iterate(k){
      p[i] = new Ponto;
      p[i].x = 12+i;
      p[i].y = 12-i;
      i = i + 1;
   }
   printV(p,k);
   sort(p,k);
   print '\n';
   printV(p,k);
   print '\n';
}

--7
main(){
    k = 5;
    x = new Int[][k];
    i = 0;
    iterate(k){
       x[i] = new Int[k];
       i = i + 1;
    }
    i = 0;
    iterate(k){
       x[i][i] = 2*i + 1;
       i = i + 1;
    }
    
    z = x[3][3];
    
}

--8
fat(n :: Int) : Int{
  if(n == 0){
      return 1;
  }
  return n*fat(n-1)[0];
}
      
spook(n :: Int) : Int{
    if(n == 1){ return 2*n;}
    if(n == 2){ return 2*n+1;}
    return n-1;
}

main(){
   k = fat(6)[0];
   k = spook(2)[0];
   print k;
   print '\n';
}

--9
f(x :: Int) : Int, Float{
   y = 2*x  + 1;
   if( y < 10)
    return y, 1.5;
  else
    return y, 1.5;
}

main(){
  z = f(10)[1];
  h = 2*f(10)[0];
}

--10
fibonacci(n :: Int) : Int {
  if (n < 1)
    return n;
  if (n == 1)
    return n;
  return fibonacci(n-1)[0] + fibonacci(n-2)[0];
}

main() {
  v = fibonacci(5)[0];
  print v;
}
